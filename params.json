{"name":"Queryexecutor","tagline":"Alternative approach of working with SQL databases ","body":"[![Build Status](https://travis-ci.org/chernser/QueryExecutor.png?branch=develop)](https://travis-ci.org/chernser/QueryExecutor)\r\n\r\nQueryExecutor\r\n=============\r\n\r\nAlternative approach of working with SQL databases \r\n\r\nPreface\r\n-------------\r\n\r\nConnection pools are not connection-leaks free. But they provide direct access to connection, what\r\n  is required for complex things like transactions and prepared statements.\r\n\r\nQueryExecutor uses poll of workers with attached connections to them, so your application\r\n  should not care about freeing them.\r\n\r\n\r\nHow to use\r\n-------------\r\n\r\nQueryExecutor is facade class which provides main API to library. Each instance of query executor\r\nis bound to custom data source.\r\n\r\nYou need to implement queryexecutor.inf.DataSource interface to provide connection creation method.\r\n\r\n\r\n```java\r\n\r\n    public class MainDS implements DataSource {\r\n\r\n        @Override\r\n        Connection createConnection() throws SQLException {\r\n            String connectionUrl = System.getProperty(\"DB_URL\");\r\n            Connection connection = DriverManager.getConnection(connectionUrl);\r\n            if (connection == null) {\r\n                throw new SQLException(\"Failed to get connection\");\r\n            }\r\n            return connection;\r\n        }\r\n    }\r\n\r\n\r\n    QueryExecutor mainExecutor = new QueryExecutor(POOL_SIZE, new MainDS());\r\n\r\n    ResultSet rs = null;\r\n    try {\r\n\r\n        rs = mainExecutor.executeQuery(\"SELECT * FROM users\");\r\n        return mapResultSetToListOfUsers(rs);\r\n    } finally {\r\n        QueryExecutor.closeResultSet(rs);\r\n    }\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}